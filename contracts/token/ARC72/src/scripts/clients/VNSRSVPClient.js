/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "admin_reserve(address,byte[32],byte[256],uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "killApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "killReservation(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "killAccount(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBox(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reservation_owner(byte[32])address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reservation_price(byte[32])uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reservation_name(byte[32])byte[256]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reservation_length(byte[32])uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "account_node(address)byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reserve(byte[32],byte[256],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "release(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNSU1ZQLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjI5MjEKICAgIC8vIGNsYXNzIFZOU1JTVlAoUlNWUCwgU3Rha2VhYmxlLCBVcGdyYWRlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VNSRSVP",
        "methods": [
            {
                "name": "admin_reserve",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "byte[256]",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "length"
                    },
                    {
                        "type": "uint64",
                        "name": "price"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killReservation",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killAccount",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteBox",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "reservation_owner",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "reservation_price",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "reservation_name",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[256]"
                }
            },
            {
                "name": "reservation_length",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "account_node",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "reserve",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "byte[256]",
                        "name": "name"
                    },
                    {
                        "type": "uint64",
                        "name": "length"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "release",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class VnsrsvpCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the VNSRSVP smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the VNSRSVP smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the VNSRSVP smart contract using the killApplication()void ABI method
             *
             * @param args Any args for the contract call
             * @param params Any additional parameters for the call
             * @returns A TypedCallParams object for the call
             */
            killApplication(args, params = {}) {
                return {
                    method: 'killApplication()void',
                    methodArgs: Array.isArray(args) ? args : [],
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the admin_reserve(address,byte[32],byte[256],uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static adminReserve(args, params) {
        return {
            method: 'admin_reserve(address,byte[32],byte[256],uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.owner, args.node, args.name, args.length, args.price],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the killReservation(byte[32])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static killReservation(args, params) {
        return {
            method: 'killReservation(byte[32])void',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the killAccount(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static killAccount(args, params) {
        return {
            method: 'killAccount(address)void',
            methodArgs: Array.isArray(args) ? args : [args.account],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deleteBox(byte[])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deleteBox(args, params) {
        return {
            method: 'deleteBox(byte[])void',
            methodArgs: Array.isArray(args) ? args : [args.key],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the reservation_owner(byte[32])address ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static reservationOwner(args, params) {
        return {
            method: 'reservation_owner(byte[32])address',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the reservation_price(byte[32])uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static reservationPrice(args, params) {
        return {
            method: 'reservation_price(byte[32])uint64',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the reservation_name(byte[32])byte[256] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static reservationName(args, params) {
        return {
            method: 'reservation_name(byte[32])byte[256]',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the reservation_length(byte[32])uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static reservationLength(args, params) {
        return {
            method: 'reservation_length(byte[32])uint64',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the account_node(address)byte[32] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static accountNode(args, params) {
        return {
            method: 'account_node(address)byte[32]',
            methodArgs: Array.isArray(args) ? args : [args.account],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the reserve(byte[32],byte[256],uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static reserve(args, params) {
        return {
            method: 'reserve(byte[32],byte[256],uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.name, args.length],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the release(byte[32])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static release(args, params) {
        return {
            method: 'release(byte[32])void',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_delegate(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setDelegate(args, params) {
        return {
            method: 'set_delegate(address)void',
            methodArgs: Array.isArray(args) ? args : [args.delegate],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static participate(args, params) {
        return {
            method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void',
            methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the VNSRSVP smart contract
 */
export class VnsrsvpClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `VnsrsvpClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the VNSRSVP smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(VnsrsvpCallFactory.create);
        const updateArgs = params.updateCall?.(VnsrsvpCallFactory.update);
        const deleteArgs = params.deleteCall?.(VnsrsvpCallFactory.delete);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the VNSRSVP smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the VNSRSVP smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Gets available delete methods
     */
    get delete() {
        const $this = this;
        return {
            /**
             * Deletes an existing instance of the VNSRSVP smart contract using the killApplication()void ABI method.
             *
             * @param args The arguments for the smart contract call
             * @param params Any additional parameters for the call
             * @returns The delete result
             */
            async killApplication(args, params = {}) {
                return $this.mapReturnValue(await $this.appClient.delete(VnsrsvpCallFactory.delete.killApplication(args, params)));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the VNSRSVP smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the admin_reserve(address,byte[32],byte[256],uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    adminReserve(args, params = {}) {
        return this.call(VnsrsvpCallFactory.adminReserve(args, params));
    }
    /**
     * Calls the killReservation(byte[32])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    killReservation(args, params = {}) {
        return this.call(VnsrsvpCallFactory.killReservation(args, params));
    }
    /**
     * Calls the killAccount(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    killAccount(args, params = {}) {
        return this.call(VnsrsvpCallFactory.killAccount(args, params));
    }
    /**
     * Calls the deleteBox(byte[])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deleteBox(args, params = {}) {
        return this.call(VnsrsvpCallFactory.deleteBox(args, params));
    }
    /**
     * Calls the reservation_owner(byte[32])address ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    reservationOwner(args, params = {}) {
        return this.call(VnsrsvpCallFactory.reservationOwner(args, params));
    }
    /**
     * Calls the reservation_price(byte[32])uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    reservationPrice(args, params = {}) {
        return this.call(VnsrsvpCallFactory.reservationPrice(args, params));
    }
    /**
     * Calls the reservation_name(byte[32])byte[256] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    reservationName(args, params = {}) {
        return this.call(VnsrsvpCallFactory.reservationName(args, params));
    }
    /**
     * Calls the reservation_length(byte[32])uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    reservationLength(args, params = {}) {
        return this.call(VnsrsvpCallFactory.reservationLength(args, params));
    }
    /**
     * Calls the account_node(address)byte[32] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    accountNode(args, params = {}) {
        return this.call(VnsrsvpCallFactory.accountNode(args, params));
    }
    /**
     * Calls the reserve(byte[32],byte[256],uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    reserve(args, params = {}) {
        return this.call(VnsrsvpCallFactory.reserve(args, params));
    }
    /**
     * Calls the release(byte[32])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    release(args, params = {}) {
        return this.call(VnsrsvpCallFactory.release(args, params));
    }
    /**
     * Calls the set_delegate(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setDelegate(args, params = {}) {
        return this.call(VnsrsvpCallFactory.setDelegate(args, params));
    }
    /**
     * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    participate(args, params = {}) {
        return this.call(VnsrsvpCallFactory.participate(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(VnsrsvpCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(VnsrsvpCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(VnsrsvpCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(VnsrsvpCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return VnsrsvpClient.getIntegerState(state, 'contract_version');
            },
            get delegate() {
                return VnsrsvpClient.getBinaryState(state, 'delegate');
            },
            get deploymentVersion() {
                return VnsrsvpClient.getIntegerState(state, 'deployment_version');
            },
            get owner() {
                return VnsrsvpClient.getBinaryState(state, 'owner');
            },
            get stakeable() {
                return VnsrsvpClient.getIntegerState(state, 'stakeable');
            },
            get updatable() {
                return VnsrsvpClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return VnsrsvpClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            adminReserve(args, params) {
                promiseChain = promiseChain.then(() => client.adminReserve(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            killReservation(args, params) {
                promiseChain = promiseChain.then(() => client.killReservation(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            killAccount(args, params) {
                promiseChain = promiseChain.then(() => client.killAccount(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deleteBox(args, params) {
                promiseChain = promiseChain.then(() => client.deleteBox(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            reservationOwner(args, params) {
                promiseChain = promiseChain.then(() => client.reservationOwner(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            reservationPrice(args, params) {
                promiseChain = promiseChain.then(() => client.reservationPrice(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            reservationName(args, params) {
                promiseChain = promiseChain.then(() => client.reservationName(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            reservationLength(args, params) {
                promiseChain = promiseChain.then(() => client.reservationLength(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            accountNode(args, params) {
                promiseChain = promiseChain.then(() => client.accountNode(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            reserve(args, params) {
                promiseChain = promiseChain.then(() => client.reserve(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            release(args, params) {
                promiseChain = promiseChain.then(() => client.release(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.setDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            participate(args, params) {
                promiseChain = promiseChain.then(() => client.participate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            get delete() {
                const $this = this;
                return {
                    killApplication(args, params) {
                        promiseChain = promiseChain.then(() => client.delete.killApplication(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
