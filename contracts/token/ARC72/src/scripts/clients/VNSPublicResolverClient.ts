/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "post_update(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddr(byte[32],address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addr(byte[32])address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAddress(byte[32],uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addresss(byte[32],uint64)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clearRecords(byte[32])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "recordVersions(byte[32])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNQdWJsaWNSZXNvbHZlci5hcHByb3ZhbF9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI4CiAgICAvLyBjbGFzcyBWTlNQdWJsaWNSZXNvbHZlcihWTlNBZGRyUmVzb2x2ZXIsIFZOU0FkZHJlc3NSZXNvbHZlcik6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTEKICAgIG1ldGhvZCAicG9zdF91cGRhdGUodWludDY0KXZvaWQiCiAgICBtZXRob2QgInNldEFkZHIoYnl0ZVszMl0sYWRkcmVzcyl2b2lkIgogICAgbWV0aG9kICJhZGRyKGJ5dGVbMzJdKWFkZHJlc3MiCiAgICBtZXRob2QgInNldEFkZHJlc3MoYnl0ZVszMl0sdWludDY0LGFkZHJlc3Mpdm9pZCIKICAgIG1ldGhvZCAiYWRkcmVzc3MoYnl0ZVszMl0sdWludDY0KWFkZHJlc3MiCiAgICBtZXRob2QgImNsZWFyUmVjb3JkcyhieXRlWzMyXSl2b2lkIgogICAgbWV0aG9kICJyZWNvcmRWZXJzaW9ucyhieXRlWzMyXSl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX3Bvc3RfdXBkYXRlX3JvdXRlQDIgbWFpbl9zZXRBZGRyX3JvdXRlQDMgbWFpbl9hZGRyX3JvdXRlQDQgbWFpbl9zZXRBZGRyZXNzX3JvdXRlQDUgbWFpbl9hZGRyZXNzc19yb3V0ZUA2IG1haW5fY2xlYXJSZWNvcmRzX3JvdXRlQDcgbWFpbl9yZWNvcmRWZXJzaW9uc19yb3V0ZUA4CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX3Bvc3RfdXBkYXRlX3JvdXRlQDI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMzIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI4CiAgICAvLyBjbGFzcyBWTlNQdWJsaWNSZXNvbHZlcihWTlNBZGRyUmVzb2x2ZXIsIFZOU0FkZHJlc3NSZXNvbHZlcik6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMzIKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBwb3N0X3VwZGF0ZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9zZXRBZGRyX3JvdXRlQDM6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI4CiAgICAvLyBjbGFzcyBWTlNQdWJsaWNSZXNvbHZlcihWTlNBZGRyUmVzb2x2ZXIsIFZOU0FkZHJlc3NSZXNvbHZlcik6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNjQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRBZGRyCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2FkZHJfcm91dGVANDoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAzNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMjgKICAgIC8vIGNsYXNzIFZOU1B1YmxpY1Jlc29sdmVyKFZOU0FkZHJSZXNvbHZlciwgVk5TQWRkcmVzc1Jlc29sdmVyKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAzNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFkZHIKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fc2V0QWRkcmVzc19yb3V0ZUA1OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTEyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEyOAogICAgLy8gY2xhc3MgVk5TUHVibGljUmVzb2x2ZXIoVk5TQWRkclJlc29sdmVyLCBWTlNBZGRyZXNzUmVzb2x2ZXIpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTEyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2V0QWRkcmVzcwogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9hZGRyZXNzc19yb3V0ZUA2OgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDg1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEyOAogICAgLy8gY2xhc3MgVk5TUHVibGljUmVzb2x2ZXIoVk5TQWRkclJlc29sdmVyLCBWTlNBZGRyZXNzUmVzb2x2ZXIpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDg1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgYWRkcmVzc3MKICAgIGJ5dGUgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fY2xlYXJSZWNvcmRzX3JvdXRlQDc6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI4CiAgICAvLyBjbGFzcyBWTlNQdWJsaWNSZXNvbHZlcihWTlNBZGRyUmVzb2x2ZXIsIFZOU0FkZHJlc3NSZXNvbHZlcik6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjEKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBjbGVhclJlY29yZHMKICAgIGludCAxCiAgICByZXR1cm4KCm1haW5fcmVjb3JkVmVyc2lvbnNfcm91dGVAODoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTk5MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMjgKICAgIC8vIGNsYXNzIFZOU1B1YmxpY1Jlc29sdmVyKFZOU0FkZHJSZXNvbHZlciwgVk5TQWRkcmVzc1Jlc29sdmVyKToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTk5MQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIHJlY29yZFZlcnNpb25zCiAgICBieXRlIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMToKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEyOAogICAgLy8gY2xhc3MgVk5TUHVibGljUmVzb2x2ZXIoVk5TQWRkclJlc29sdmVyLCBWTlNBZGRyZXNzUmVzb2x2ZXIpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIHJlamVjdCB0cmFuc2FjdGlvbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBpcyBjcmVhdGluZwogICAgaW50IDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0LlZOU1B1YmxpY1Jlc29sdmVyLnBvc3RfdXBkYXRlKHZuczogYnl0ZXMpIC0+IHZvaWQ6CnBvc3RfdXBkYXRlOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTMyLTIxMzMKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHBvc3RfdXBkYXRlKHNlbGYsIHZuczogYXJjNC5VSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEzNAogICAgLy8gc2VsZi52bnMgPSB2bnMubmF0aXZlCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAwOQogICAgLy8gc2VsZi52bnMgPSBVSW50NjQoMCkKICAgIGJ5dGUgInZucyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEzNAogICAgLy8gc2VsZi52bnMgPSB2bnMubmF0aXZlCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkclJlc29sdmVyLnNldEFkZHIobm9kZTogYnl0ZXMsIG5ld0FkZHJlc3M6IGJ5dGVzKSAtPiB2b2lkOgpzZXRBZGRyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDY0LTIwNjUKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHNldEFkZHIoc2VsZiwgbm9kZTogQnl0ZXMzMiwgbmV3QWRkcmVzczogYXJjNC5BZGRyZXNzKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNjYKICAgIC8vIHNlbGYuYXV0aG9yaXplZChub2RlKQogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIGF1dGhvcml6ZWQKICAgIGR1cAogICAgZnJhbWVfYnVyeSAtMgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDY3CiAgICAvLyBhcmM0LmVtaXQoQWRkckNoYW5nZWQobm9kZSwgbmV3QWRkcmVzcykpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgbWV0aG9kICJBZGRyQ2hhbmdlZChieXRlWzMyXSxhZGRyZXNzKSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNjgKICAgIC8vIHNlbGYuX3NldEFkZHIobm9kZS5ieXRlcywgbmV3QWRkcmVzcy5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTIKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfc2V0QWRkcgogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQmFzZVJlc29sdmVyLmF1dGhvcml6ZWQobm9kZTogYnl0ZXMpIC0+IGJ5dGVzOgphdXRob3JpemVkOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDExLTIwMTIKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgYXV0aG9yaXplZChzZWxmLCBub2RlOiBCeXRlczMyKSAtPiBOb25lOgogICAgcHJvdG8gMSAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMTMKICAgIC8vIGFwcCA9IEFwcGxpY2F0aW9uKHNlbGYudm5zKQogICAgaW50IDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAwOQogICAgLy8gc2VsZi52bnMgPSBVSW50NjQoMCkKICAgIGJ5dGUgInZucyIKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAxMwogICAgLy8gYXBwID0gQXBwbGljYXRpb24oc2VsZi52bnMpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudm5zIGV4aXN0cwogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDE0CiAgICAvLyBvd25lciwgX3R4biA9IGFyYzQuYWJpX2NhbGwoVk5TLm93bmVyT2YsIG5vZGUsIGFwcF9pZD1hcHApCiAgICBpdHhuX2JlZ2luCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIG1ldGhvZCAib3duZXJPZihieXRlWzMyXSlhZGRyZXNzIgogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGZyYW1lX2RpZyAtMQogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIGludCBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIGl0eG5fc3VibWl0CiAgICBpdHhuIExhc3RMb2cKICAgIGR1cAogICAgZXh0cmFjdCA0IDAKICAgIHN3YXAKICAgIGV4dHJhY3QgMCA0CiAgICBieXRlIDB4MTUxZjdjNzUKICAgID09CiAgICBhc3NlcnQgLy8gQVJDNCBwcmVmaXggaXMgdmFsaWQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAxNQogICAgLy8gYXNzZXJ0IG93bmVyID09IFR4bi5zZW5kZXIsICJzZW5kZXIgbXVzdCBiZSBvd25lciIKICAgIHR4biBTZW5kZXIKICAgID09CiAgICBhc3NlcnQgLy8gc2VuZGVyIG11c3QgYmUgb3duZXIKICAgIGZyYW1lX2RpZyAtMQogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkclJlc29sdmVyLl9zZXRBZGRyKG5vZGU6IGJ5dGVzLCBuZXdBZGRyZXNzOiBieXRlcykgLT4gdm9pZDoKX3NldEFkZHI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNzAtMjA3MQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfc2V0QWRkcihzZWxmLCBub2RlOiBCeXRlcywgbmV3QWRkcmVzczogQWNjb3VudCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDcyCiAgICAvLyByZWNvcmRfdmVyc2lvbl9ieXRlcyA9IGFyYzQuVUludDY0KHNlbGYuX3JlY29yZFZlcnNpb25zKG5vZGUpKS5ieXRlcwogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIF9yZWNvcmRWZXJzaW9ucwogICAgaXRvYgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDczCiAgICAvLyBzZWxmLnZlcnNpb25hYmxlX2FkZHJzW0J5dGVzNDAuZnJvbV9ieXRlcyhyZWNvcmRfdmVyc2lvbl9ieXRlcyArIG5vZGUpXSA9ICgKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNTQKICAgIC8vIHNlbGYudmVyc2lvbmFibGVfYWRkcnMgPSBCb3hNYXAoQnl0ZXM0MCwgQWNjb3VudCwga2V5X3ByZWZpeD1iImFkZHJzXyIpCiAgICBieXRlIDB4NjE2NDY0NzI3MzVmCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNzMKICAgIC8vIHNlbGYudmVyc2lvbmFibGVfYWRkcnNbQnl0ZXM0MC5mcm9tX2J5dGVzKHJlY29yZF92ZXJzaW9uX2J5dGVzICsgbm9kZSldID0gKAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNzMtMjA3NQogICAgLy8gc2VsZi52ZXJzaW9uYWJsZV9hZGRyc1tCeXRlczQwLmZyb21fYnl0ZXMocmVjb3JkX3ZlcnNpb25fYnl0ZXMgKyBub2RlKV0gPSAoCiAgICAvLyAgICAgbmV3QWRkcmVzcwogICAgLy8gKQogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQmFzZVJlc29sdmVyLl9yZWNvcmRWZXJzaW9ucyhub2RlOiBieXRlcykgLT4gdWludDY0OgpfcmVjb3JkVmVyc2lvbnM6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMTctMjAxOAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfcmVjb3JkVmVyc2lvbnMoc2VsZiwgbm9kZTogQnl0ZXMpIC0+IFVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDA4CiAgICAvLyBzZWxmLnJlY29yZF92ZXJzaW9ucyA9IEJveE1hcChCeXRlczMyLCBVSW50NjQsIGtleV9wcmVmaXg9YiJ2ZXJzaW9uc18iKQogICAgYnl0ZSAweDc2NjU3MjczNjk2ZjZlNzM1ZgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDE5CiAgICAvLyByZXR1cm4gc2VsZi5yZWNvcmRfdmVyc2lvbnMuZ2V0KGtleT1CeXRlczMyLmZyb21fYnl0ZXMobm9kZSksIGRlZmF1bHQ9VUludDY0KDApKQogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIGludCAwCiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkclJlc29sdmVySW50ZXJmYWNlLmFkZHIobm9kZTogYnl0ZXMpIC0+IGJ5dGVzOgphZGRyOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDM3LTIwMzgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFkZHIoc2VsZiwgbm9kZTogQnl0ZXMzMikgLT4gYXJjNC5BZGRyZXNzOgogICAgcHJvdG8gMSAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNDIKICAgIC8vIHJldHVybiBhcmM0LkFkZHJlc3Moc2VsZi5fYWRkcihub2RlLmJ5dGVzKSkKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfYWRkcgogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkclJlc29sdmVyLl9hZGRyKG5vZGU6IGJ5dGVzKSAtPiBieXRlczoKX2FkZHI6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwNTYtMjA1NwogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfYWRkcihzZWxmLCBub2RlOiBCeXRlcykgLT4gQWNjb3VudDoKICAgIHByb3RvIDEgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDU4CiAgICAvLyByZWNvcmRfdmVyc2lvbl9ieXRlcyA9IGFyYzQuVUludDY0KHNlbGYuX3JlY29yZFZlcnNpb25zKG5vZGUpKS5ieXRlcwogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIF9yZWNvcmRWZXJzaW9ucwogICAgaXRvYgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDYxCiAgICAvLyBkZWZhdWx0PUdsb2JhbC56ZXJvX2FkZHJlc3MsCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIHN3YXAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjA2MAogICAgLy8ga2V5PUJ5dGVzNDAuZnJvbV9ieXRlcyhyZWNvcmRfdmVyc2lvbl9ieXRlcyArIG5vZGUpLAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjA1NAogICAgLy8gc2VsZi52ZXJzaW9uYWJsZV9hZGRycyA9IEJveE1hcChCeXRlczQwLCBBY2NvdW50LCBrZXlfcHJlZml4PWIiYWRkcnNfIikKICAgIGJ5dGUgMHg2MTY0NjQ3MjczNWYKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjA1OS0yMDYyCiAgICAvLyByZXR1cm4gc2VsZi52ZXJzaW9uYWJsZV9hZGRycy5nZXQoCiAgICAvLyAgICAga2V5PUJ5dGVzNDAuZnJvbV9ieXRlcyhyZWNvcmRfdmVyc2lvbl9ieXRlcyArIG5vZGUpLAogICAgLy8gICAgIGRlZmF1bHQ9R2xvYmFsLnplcm9fYWRkcmVzcywKICAgIC8vICkKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgc2VsZWN0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5WTlNBZGRyZXNzUmVzb2x2ZXIuc2V0QWRkcmVzcyhub2RlOiBieXRlcywgY29pblR5cGU6IGJ5dGVzLCBuZXdBZGRyZXNzOiBieXRlcykgLT4gdm9pZDoKc2V0QWRkcmVzczoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjExMi0yMTE1CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBzZXRBZGRyZXNzKAogICAgLy8gICAgIHNlbGYsIG5vZGU6IEJ5dGVzMzIsIGNvaW5UeXBlOiBhcmM0LlVJbnQ2NCwgbmV3QWRkcmVzczogYXJjNC5BZGRyZXNzCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byAzIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjExNgogICAgLy8gc2VsZi5hdXRob3JpemVkKG5vZGUpCiAgICBmcmFtZV9kaWcgLTMKICAgIGNhbGxzdWIgYXV0aG9yaXplZAogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0zCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMTcKICAgIC8vIGFyYzQuZW1pdChBZGRyZXNzQ2hhbmdlZChub2RlLCBjb2luVHlwZSwgbmV3QWRkcmVzcykpCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIG1ldGhvZCAiQWRkcmVzc0NoYW5nZWQoYnl0ZVszMl0sdWludDY0LGFkZHJlc3MpIgogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjExOAogICAgLy8gc2VsZi5fc2V0QWRkcmVzcyhub2RlLmJ5dGVzLCBjb2luVHlwZS5uYXRpdmUsIG5ld0FkZHJlc3MubmF0aXZlKQogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBmcmFtZV9kaWcgLTMKICAgIHN3YXAKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfc2V0QWRkcmVzcwogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkcmVzc1Jlc29sdmVyLl9zZXRBZGRyZXNzKG5vZGU6IGJ5dGVzLCBjb2luVHlwZTogdWludDY0LCBuZXdBZGRyZXNzOiBieXRlcykgLT4gdm9pZDoKX3NldEFkZHJlc3M6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMjAtMjEyMQogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBfc2V0QWRkcmVzcyhzZWxmLCBub2RlOiBCeXRlcywgY29pblR5cGU6IFVJbnQ2NCwgbmV3QWRkcmVzczogQWNjb3VudCkgLT4gTm9uZToKICAgIHByb3RvIDMgMAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTIyCiAgICAvLyByZWNvcmRfdmVyc2lvbl9ieXRlcyA9IGFyYzQuVUludDY0KHNlbGYuX3JlY29yZFZlcnNpb25zKG5vZGUpKS5ieXRlcwogICAgZnJhbWVfZGlnIC0zCiAgICBjYWxsc3ViIF9yZWNvcmRWZXJzaW9ucwogICAgaXRvYgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI0CiAgICAvLyBCeXRlczQ4LmZyb21fYnl0ZXMocmVjb3JkX3ZlcnNpb25fYnl0ZXMgKyBub2RlICsgb3AuaXRvYihjb2luVHlwZSkpCiAgICBmcmFtZV9kaWcgLTMKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0yCiAgICBpdG9iCiAgICBjb25jYXQKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEwMgogICAgLy8gc2VsZi52ZXJzaW9uYWJsZV9hZGRyZXNzZXMgPSBCb3hNYXAoQnl0ZXM0OCwgQWNjb3VudCwga2V5X3ByZWZpeD1iImFkZHJzXyIpCiAgICBieXRlIDB4NjE2NDY0NzI3MzVmCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMjMtMjEyNQogICAgLy8gc2VsZi52ZXJzaW9uYWJsZV9hZGRyZXNzZXNbCiAgICAvLyAgICAgQnl0ZXM0OC5mcm9tX2J5dGVzKHJlY29yZF92ZXJzaW9uX2J5dGVzICsgbm9kZSArIG9wLml0b2IoY29pblR5cGUpKQogICAgLy8gXSA9IG5ld0FkZHJlc3MKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gY29udHJhY3QuVk5TQWRkcmVzc1Jlc29sdmVySW50ZXJmYWNlLmFkZHJlc3NzKG5vZGU6IGJ5dGVzLCBjb2luVHlwZTogYnl0ZXMpIC0+IGJ5dGVzOgphZGRyZXNzczoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjA4NS0yMDg2CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBhZGRyZXNzcyhzZWxmLCBub2RlOiBCeXRlczMyLCBjb2luVHlwZTogYXJjNC5VSW50NjQpIC0+IGFyYzQuQWRkcmVzczoKICAgIHByb3RvIDIgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMDkwCiAgICAvLyByZXR1cm4gYXJjNC5BZGRyZXNzKHNlbGYuX2FkZHJlc3Mobm9kZS5ieXRlcywgY29pblR5cGUubmF0aXZlKSkKICAgIGZyYW1lX2RpZyAtMQogICAgYnRvaQogICAgZnJhbWVfZGlnIC0yCiAgICBzd2FwCiAgICBjYWxsc3ViIF9hZGRyZXNzCiAgICByZXRzdWIKCgovLyBjb250cmFjdC5WTlNBZGRyZXNzUmVzb2x2ZXIuX2FkZHJlc3Mobm9kZTogYnl0ZXMsIGNvaW5UeXBlOiB1aW50NjQpIC0+IGJ5dGVzOgpfYWRkcmVzczoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEwNC0yMTA1CiAgICAvLyBAc3Vicm91dGluZQogICAgLy8gZGVmIF9hZGRyZXNzKHNlbGYsIG5vZGU6IEJ5dGVzLCBjb2luVHlwZTogVUludDY0KSAtPiBBY2NvdW50OgogICAgcHJvdG8gMiAxCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMDYKICAgIC8vIHJlY29yZF92ZXJzaW9uX2J5dGVzID0gYXJjNC5VSW50NjQoc2VsZi5fcmVjb3JkVmVyc2lvbnMobm9kZSkpLmJ5dGVzCiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgX3JlY29yZFZlcnNpb25zCiAgICBpdG9iCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIxMDkKICAgIC8vIGRlZmF1bHQ9R2xvYmFsLnplcm9fYWRkcmVzcywKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgc3dhcAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTA4CiAgICAvLyBrZXk9Qnl0ZXM0OC5mcm9tX2J5dGVzKHJlY29yZF92ZXJzaW9uX2J5dGVzICsgbm9kZSArIG9wLml0b2IoY29pblR5cGUpKSwKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGNvbmNhdAogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTAyCiAgICAvLyBzZWxmLnZlcnNpb25hYmxlX2FkZHJlc3NlcyA9IEJveE1hcChCeXRlczQ4LCBBY2NvdW50LCBrZXlfcHJlZml4PWIiYWRkcnNfIikKICAgIGJ5dGUgMHg2MTY0NjQ3MjczNWYKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjEwNy0yMTEwCiAgICAvLyByZXR1cm4gc2VsZi52ZXJzaW9uYWJsZV9hZGRyZXNzZXMuZ2V0KAogICAgLy8gICAgIGtleT1CeXRlczQ4LmZyb21fYnl0ZXMocmVjb3JkX3ZlcnNpb25fYnl0ZXMgKyBub2RlICsgb3AuaXRvYihjb2luVHlwZSkpLAogICAgLy8gICAgIGRlZmF1bHQ9R2xvYmFsLnplcm9fYWRkcmVzcywKICAgIC8vICkKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYm94X2dldAogICAgc2VsZWN0CiAgICByZXRzdWIKCgovLyBjb250cmFjdC5WTlNCYXNlUmVzb2x2ZXIuY2xlYXJSZWNvcmRzKG5vZGU6IGJ5dGVzKSAtPiB2b2lkOgpjbGVhclJlY29yZHM6CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjEtMjAyMgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgY2xlYXJSZWNvcmRzKHNlbGYsIG5vZGU6IEJ5dGVzMzIpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MjAyMwogICAgLy8gc2VsZi5hdXRob3JpemVkKG5vZGUpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgYXV0aG9yaXplZAogICAgZHVwCiAgICBmcmFtZV9idXJ5IC0xCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjQKICAgIC8vIG5ld1ZlcnNpb24gPSBzZWxmLl9yZWNvcmRWZXJzaW9ucyhub2RlLmJ5dGVzKSArIFVJbnQ2NCgxKQogICAgY2FsbHN1YiBfcmVjb3JkVmVyc2lvbnMKICAgIGludCAxCiAgICArCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjUKICAgIC8vIGFyYzQuZW1pdChWZXJzaW9uQ2hhbmdlZChub2RlLCBhcmM0LlVJbnQ2NChuZXdWZXJzaW9uKSkpCiAgICBpdG9iCiAgICBmcmFtZV9kaWcgLTEKICAgIGRpZyAxCiAgICBjb25jYXQKICAgIG1ldGhvZCAiVmVyc2lvbkNoYW5nZWQoYnl0ZVszMl0sdWludDY0KSIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMDgKICAgIC8vIHNlbGYucmVjb3JkX3ZlcnNpb25zID0gQm94TWFwKEJ5dGVzMzIsIFVJbnQ2NCwga2V5X3ByZWZpeD1iInZlcnNpb25zXyIpCiAgICBieXRlIDB4NzY2NTcyNzM2OTZmNmU3MzVmCiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjIwMjYKICAgIC8vIHNlbGYucmVjb3JkX3ZlcnNpb25zW25vZGVdID0gbmV3VmVyc2lvbgogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKCi8vIGNvbnRyYWN0LlZOU1ZlcnNpb25hYmxlUmVzb2x2ZXJJbnRlcmZhY2UucmVjb3JkVmVyc2lvbnMobm9kZTogYnl0ZXMpIC0+IGJ5dGVzOgpyZWNvcmRWZXJzaW9uczoKICAgIC8vIHNyYy9zcmMvY29udHJhY3QucHk6MTk5MS0xOTkyCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiByZWNvcmRWZXJzaW9ucyhzZWxmLCBub2RlOiBCeXRlczMyKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToxOTk2CiAgICAvLyByZXR1cm4gYXJjNC5VSW50NjQoc2VsZi5fcmVjb3JkVmVyc2lvbnMobm9kZS5ieXRlcykpCiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgX3JlY29yZFZlcnNpb25zCiAgICBpdG9iCiAgICByZXRzdWIK",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNQdWJsaWNSZXNvbHZlci5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMTI4CiAgICAvLyBjbGFzcyBWTlNQdWJsaWNSZXNvbHZlcihWTlNBZGRyUmVzb2x2ZXIsIFZOU0FkZHJlc3NSZXNvbHZlcik6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "vns": {
          "type": "uint64",
          "key": "vns"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "VNSPublicResolver",
    "methods": [
      {
        "name": "post_update",
        "args": [
          {
            "type": "uint64",
            "name": "vns"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAddr",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "address",
            "name": "newAddress"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addr",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "address"
        },
        "desc": "Get the address for a node"
      },
      {
        "name": "setAddress",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "uint64",
            "name": "coinType"
          },
          {
            "type": "address",
            "name": "newAddress"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addresss",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          },
          {
            "type": "uint64",
            "name": "coinType"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "address"
        },
        "desc": "Get the address for a node"
      },
      {
        "name": "clearRecords",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "recordVersions",
        "args": [
          {
            "type": "byte[32]",
            "name": "node"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        },
        "desc": "Get the version for a node"
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the VnsPublicResolver smart contract.
 */
export type VnsPublicResolver = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'post_update(uint64)void' | 'post_update', {
      argsObj: {
        vns: bigint | number
      }
      argsTuple: [vns: bigint | number]
      returns: void
    }>
    & Record<'setAddr(byte[32],address)void' | 'setAddr', {
      argsObj: {
        node: Uint8Array
        newAddress: string
      }
      argsTuple: [node: Uint8Array, newAddress: string]
      returns: void
    }>
    & Record<'addr(byte[32])address' | 'addr', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: string
    }>
    & Record<'setAddress(byte[32],uint64,address)void' | 'setAddress', {
      argsObj: {
        node: Uint8Array
        coinType: bigint | number
        newAddress: string
      }
      argsTuple: [node: Uint8Array, coinType: bigint | number, newAddress: string]
      returns: void
    }>
    & Record<'addresss(byte[32],uint64)address' | 'addresss', {
      argsObj: {
        node: Uint8Array
        coinType: bigint | number
      }
      argsTuple: [node: Uint8Array, coinType: bigint | number]
      returns: string
    }>
    & Record<'clearRecords(byte[32])void' | 'clearRecords', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: void
    }>
    & Record<'recordVersions(byte[32])uint64' | 'recordVersions', {
      argsObj: {
        node: Uint8Array
      }
      argsTuple: [node: Uint8Array]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      vns?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type VnsPublicResolverSig = keyof VnsPublicResolver['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends VnsPublicResolverSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the VnsPublicResolver smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends VnsPublicResolverSig> = VnsPublicResolver['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the VnsPublicResolver smart contract to the method's return type
 */
export type MethodReturn<TSignature extends VnsPublicResolverSig> = VnsPublicResolver['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type VnsPublicResolverCreateCalls = (typeof VnsPublicResolverCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type VnsPublicResolverCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type VnsPublicResolverDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: VnsPublicResolverCreateCalls) => VnsPublicResolverCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class VnsPublicResolverCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the VNSPublicResolver smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the post_update(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'post_update(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vns],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddr(byte[32],address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddr(byte[32],address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.newAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addr(byte[32])address ABI method
   *
   * Get the address for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addr(args: MethodArgs<'addr(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addr(byte[32])address' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setAddress(byte[32],uint64,address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAddress(args: MethodArgs<'setAddress(byte[32],uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAddress(byte[32],uint64,address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.coinType, args.newAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the addresss(byte[32],uint64)address ABI method
   *
   * Get the address for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static addresss(args: MethodArgs<'addresss(byte[32],uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'addresss(byte[32],uint64)address' as const,
      methodArgs: Array.isArray(args) ? args : [args.node, args.coinType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clearRecords(byte[32])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clearRecords(byte[32])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the recordVersions(byte[32])uint64 ABI method
   *
   * Get the version for a node
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'recordVersions(byte[32])uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.node],
      ...params,
    }
  }
}

/**
 * A client to make calls to the VNSPublicResolver smart contract
 */
export class VnsPublicResolverClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `VnsPublicResolverClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof VnsPublicResolver['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the VNSPublicResolver smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: VnsPublicResolverDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(VnsPublicResolverCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the VNSPublicResolver smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the VNSPublicResolver smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public postUpdate(args: MethodArgs<'post_update(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.postUpdate(args, params))
  }

  /**
   * Calls the setAddr(byte[32],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setAddr(args, params))
  }

  /**
   * Calls the addr(byte[32])address ABI method.
   *
   * Get the address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addr(args: MethodArgs<'addr(byte[32])address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.addr(args, params))
  }

  /**
   * Calls the setAddress(byte[32],uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAddress(args: MethodArgs<'setAddress(byte[32],uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.setAddress(args, params))
  }

  /**
   * Calls the addresss(byte[32],uint64)address ABI method.
   *
   * Get the address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public addresss(args: MethodArgs<'addresss(byte[32],uint64)address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.addresss(args, params))
  }

  /**
   * Calls the clearRecords(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.clearRecords(args, params))
  }

  /**
   * Calls the recordVersions(byte[32])uint64 ABI method.
   *
   * Get the version for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(VnsPublicResolverCallFactory.recordVersions(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<VnsPublicResolver['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get vns() {
        return VnsPublicResolverClient.getIntegerState(state, 'vns')
      },
    }
  }

  public compose(): VnsPublicResolverComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.postUpdate(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addr(args: MethodArgs<'addr(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addr(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setAddress(args: MethodArgs<'setAddress(byte[32],uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addresss(args: MethodArgs<'addresss(byte[32],uint64)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.addresss(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearRecords(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.recordVersions(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as VnsPublicResolverComposer
  }
}
export type VnsPublicResolverComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the post_update(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  postUpdate(args: MethodArgs<'post_update(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'post_update(uint64)void'>]>

  /**
   * Calls the setAddr(byte[32],address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddr(args: MethodArgs<'setAddr(byte[32],address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'setAddr(byte[32],address)void'>]>

  /**
   * Calls the addr(byte[32])address ABI method.
   *
   * Get the address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addr(args: MethodArgs<'addr(byte[32])address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'addr(byte[32])address'>]>

  /**
   * Calls the setAddress(byte[32],uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAddress(args: MethodArgs<'setAddress(byte[32],uint64,address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'setAddress(byte[32],uint64,address)void'>]>

  /**
   * Calls the addresss(byte[32],uint64)address ABI method.
   *
   * Get the address for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addresss(args: MethodArgs<'addresss(byte[32],uint64)address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'addresss(byte[32],uint64)address'>]>

  /**
   * Calls the clearRecords(byte[32])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearRecords(args: MethodArgs<'clearRecords(byte[32])void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'clearRecords(byte[32])void'>]>

  /**
   * Calls the recordVersions(byte[32])uint64 ABI method.
   *
   * Get the version for a node
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  recordVersions(args: MethodArgs<'recordVersions(byte[32])uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, MethodReturn<'recordVersions(byte[32])uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the VNSPublicResolver smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): VnsPublicResolverComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): VnsPublicResolverComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<VnsPublicResolverComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<VnsPublicResolverComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type VnsPublicResolverComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type VnsPublicResolverComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
