/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "post_update(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setRegistryResolver(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "killApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "killNode(byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "killOperator(address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBox(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setRecord(byte[32],address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setSubnodeOwner(byte[32],byte[32],address)byte[32]": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setResolver(byte[32],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setOwner(byte[32],address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setTTL(byte[32],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "setApprovalForAll(address,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve(address,byte[32])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getApproved(byte[32])address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ownerOf(byte[32])address": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "resolver(byte[32])uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "ttl(byte[32])uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "recordExists(byte[32])bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "isApprovedForAll(address,address)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5WTlNSZWdpc3RyeS5jbGVhcl9zdGF0ZV9wcm9ncmFtOgogICAgLy8gc3JjL3NyYy9jb250cmFjdC5weToyMjEwCiAgICAvLyBjbGFzcyBWTlNSZWdpc3RyeShWTlMsIFN0YWtlYWJsZSwgVXBncmFkZWFibGUpOgogICAgaW50IDEKICAgIHJldHVybgo="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "registry_resolver": {
                    "type": "uint64",
                    "key": "registry_resolver"
                },
                "registry_ttl": {
                    "type": "uint64",
                    "key": "registry_ttl"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "VNSRegistry",
        "methods": [
            {
                "name": "post_update",
                "args": [
                    {
                        "type": "uint64",
                        "name": "resolver"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setRegistryResolver",
                "args": [
                    {
                        "type": "uint64",
                        "name": "resolver"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killNode",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "killOperator",
                "args": [
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteBox",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setRecord",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "resolver"
                    },
                    {
                        "type": "uint64",
                        "name": "ttl"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "setSubnodeRecord",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "byte[32]",
                        "name": "label"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "resolver"
                    },
                    {
                        "type": "uint64",
                        "name": "ttl"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the record for a subnode"
            },
            {
                "name": "setSubnodeOwner",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "byte[32]",
                        "name": "label"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "byte[32]"
                },
                "desc": "Set the owner of a subnode"
            },
            {
                "name": "setResolver",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "uint64",
                        "name": "resolver"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the resolver for a node"
            },
            {
                "name": "setOwner",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "address",
                        "name": "owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the owner of a node"
            },
            {
                "name": "setTTL",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    },
                    {
                        "type": "uint64",
                        "name": "ttl"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the TTL for a node"
            },
            {
                "name": "setApprovalForAll",
                "args": [
                    {
                        "type": "address",
                        "name": "operator"
                    },
                    {
                        "type": "bool",
                        "name": "approved"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve",
                "args": [
                    {
                        "type": "address",
                        "name": "to"
                    },
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Approve an address for a node"
            },
            {
                "name": "getApproved",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "ownerOf",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "address"
                }
            },
            {
                "name": "resolver",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "ttl",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "recordExists",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "node"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "isApprovedForAll",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "operator"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                },
                "desc": "Check if an operator is approved for all"
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class VnsRegistryCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the VNSRegistry smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the VNSRegistry smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the VNSRegistry smart contract using the killApplication()void ABI method
             *
             * @param args Any args for the contract call
             * @param params Any additional parameters for the call
             * @returns A TypedCallParams object for the call
             */
            killApplication(args, params = {}) {
                return {
                    method: 'killApplication()void',
                    methodArgs: Array.isArray(args) ? args : [],
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the post_update(uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static postUpdate(args, params) {
        return {
            method: 'post_update(uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.resolver],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setRegistryResolver(uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setRegistryResolver(args, params) {
        return {
            method: 'setRegistryResolver(uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.resolver],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the killNode(byte[32])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static killNode(args, params) {
        return {
            method: 'killNode(byte[32])void',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the killOperator(address,address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static killOperator(args, params) {
        return {
            method: 'killOperator(address,address)void',
            methodArgs: Array.isArray(args) ? args : [args.operator, args.owner],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deleteBox(byte[])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deleteBox(args, params) {
        return {
            method: 'deleteBox(byte[])void',
            methodArgs: Array.isArray(args) ? args : [args.key],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setRecord(byte[32],address,uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setRecord(args, params) {
        return {
            method: 'setRecord(byte[32],address,uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.owner, args.resolver, args.ttl],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void ABI method
     *
     * Set the record for a subnode
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setSubnodeRecord(args, params) {
        return {
            method: 'setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.label, args.owner, args.resolver, args.ttl],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setSubnodeOwner(byte[32],byte[32],address)byte[32] ABI method
     *
     * Set the owner of a subnode
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setSubnodeOwner(args, params) {
        return {
            method: 'setSubnodeOwner(byte[32],byte[32],address)byte[32]',
            methodArgs: Array.isArray(args) ? args : [args.node, args.label, args.owner],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setResolver(byte[32],uint64)void ABI method
     *
     * Set the resolver for a node
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setResolver(args, params) {
        return {
            method: 'setResolver(byte[32],uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.resolver],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setOwner(byte[32],address)void ABI method
     *
     * Set the owner of a node
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setOwner(args, params) {
        return {
            method: 'setOwner(byte[32],address)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.owner],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setTTL(byte[32],uint64)void ABI method
     *
     * Set the TTL for a node
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setTtl(args, params) {
        return {
            method: 'setTTL(byte[32],uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.node, args.ttl],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the setApprovalForAll(address,bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setApprovalForAll(args, params) {
        return {
            method: 'setApprovalForAll(address,bool)void',
            methodArgs: Array.isArray(args) ? args : [args.operator, args.approved],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve(address,byte[32])void ABI method
     *
     * Approve an address for a node
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approve(args, params) {
        return {
            method: 'approve(address,byte[32])void',
            methodArgs: Array.isArray(args) ? args : [args.to, args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the getApproved(byte[32])address ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static getApproved(args, params) {
        return {
            method: 'getApproved(byte[32])address',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the ownerOf(byte[32])address ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static ownerOf(args, params) {
        return {
            method: 'ownerOf(byte[32])address',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the resolver(byte[32])uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static resolver(args, params) {
        return {
            method: 'resolver(byte[32])uint64',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the ttl(byte[32])uint64 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static ttl(args, params) {
        return {
            method: 'ttl(byte[32])uint64',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the recordExists(byte[32])bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static recordExists(args, params) {
        return {
            method: 'recordExists(byte[32])bool',
            methodArgs: Array.isArray(args) ? args : [args.node],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the isApprovedForAll(address,address)bool ABI method
     *
     * Check if an operator is approved for all
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static isApprovedForAll(args, params) {
        return {
            method: 'isApprovedForAll(address,address)bool',
            methodArgs: Array.isArray(args) ? args : [args.owner, args.operator],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_delegate(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setDelegate(args, params) {
        return {
            method: 'set_delegate(address)void',
            methodArgs: Array.isArray(args) ? args : [args.delegate],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static participate(args, params) {
        return {
            method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void',
            methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the VNSRegistry smart contract
 */
export class VnsRegistryClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `VnsRegistryClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the VNSRegistry smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(VnsRegistryCallFactory.create);
        const updateArgs = params.updateCall?.(VnsRegistryCallFactory.update);
        const deleteArgs = params.deleteCall?.(VnsRegistryCallFactory.delete);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the VNSRegistry smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the VNSRegistry smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Gets available delete methods
     */
    get delete() {
        const $this = this;
        return {
            /**
             * Deletes an existing instance of the VNSRegistry smart contract using the killApplication()void ABI method.
             *
             * @param args The arguments for the smart contract call
             * @param params Any additional parameters for the call
             * @returns The delete result
             */
            async killApplication(args, params = {}) {
                return $this.mapReturnValue(await $this.appClient.delete(VnsRegistryCallFactory.delete.killApplication(args, params)));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the VNSRegistry smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the post_update(uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    postUpdate(args, params = {}) {
        return this.call(VnsRegistryCallFactory.postUpdate(args, params));
    }
    /**
     * Calls the setRegistryResolver(uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setRegistryResolver(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setRegistryResolver(args, params));
    }
    /**
     * Calls the killNode(byte[32])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    killNode(args, params = {}) {
        return this.call(VnsRegistryCallFactory.killNode(args, params));
    }
    /**
     * Calls the killOperator(address,address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    killOperator(args, params = {}) {
        return this.call(VnsRegistryCallFactory.killOperator(args, params));
    }
    /**
     * Calls the deleteBox(byte[])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deleteBox(args, params = {}) {
        return this.call(VnsRegistryCallFactory.deleteBox(args, params));
    }
    /**
     * Calls the setRecord(byte[32],address,uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setRecord(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setRecord(args, params));
    }
    /**
     * Calls the setSubnodeRecord(byte[32],byte[32],address,uint64,uint64)void ABI method.
     *
     * Set the record for a subnode
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setSubnodeRecord(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setSubnodeRecord(args, params));
    }
    /**
     * Calls the setSubnodeOwner(byte[32],byte[32],address)byte[32] ABI method.
     *
     * Set the owner of a subnode
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setSubnodeOwner(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setSubnodeOwner(args, params));
    }
    /**
     * Calls the setResolver(byte[32],uint64)void ABI method.
     *
     * Set the resolver for a node
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setResolver(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setResolver(args, params));
    }
    /**
     * Calls the setOwner(byte[32],address)void ABI method.
     *
     * Set the owner of a node
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setOwner(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setOwner(args, params));
    }
    /**
     * Calls the setTTL(byte[32],uint64)void ABI method.
     *
     * Set the TTL for a node
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setTtl(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setTtl(args, params));
    }
    /**
     * Calls the setApprovalForAll(address,bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setApprovalForAll(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setApprovalForAll(args, params));
    }
    /**
     * Calls the approve(address,byte[32])void ABI method.
     *
     * Approve an address for a node
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approve(args, params = {}) {
        return this.call(VnsRegistryCallFactory.approve(args, params));
    }
    /**
     * Calls the getApproved(byte[32])address ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    getApproved(args, params = {}) {
        return this.call(VnsRegistryCallFactory.getApproved(args, params));
    }
    /**
     * Calls the ownerOf(byte[32])address ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    ownerOf(args, params = {}) {
        return this.call(VnsRegistryCallFactory.ownerOf(args, params));
    }
    /**
     * Calls the resolver(byte[32])uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    resolver(args, params = {}) {
        return this.call(VnsRegistryCallFactory.resolver(args, params));
    }
    /**
     * Calls the ttl(byte[32])uint64 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    ttl(args, params = {}) {
        return this.call(VnsRegistryCallFactory.ttl(args, params));
    }
    /**
     * Calls the recordExists(byte[32])bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    recordExists(args, params = {}) {
        return this.call(VnsRegistryCallFactory.recordExists(args, params));
    }
    /**
     * Calls the isApprovedForAll(address,address)bool ABI method.
     *
     * Check if an operator is approved for all
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    isApprovedForAll(args, params = {}) {
        return this.call(VnsRegistryCallFactory.isApprovedForAll(args, params));
    }
    /**
     * Calls the set_delegate(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setDelegate(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setDelegate(args, params));
    }
    /**
     * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    participate(args, params = {}) {
        return this.call(VnsRegistryCallFactory.participate(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(VnsRegistryCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(VnsRegistryCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(VnsRegistryCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(VnsRegistryCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return VnsRegistryClient.getIntegerState(state, 'contract_version');
            },
            get delegate() {
                return VnsRegistryClient.getBinaryState(state, 'delegate');
            },
            get deploymentVersion() {
                return VnsRegistryClient.getIntegerState(state, 'deployment_version');
            },
            get owner() {
                return VnsRegistryClient.getBinaryState(state, 'owner');
            },
            get registryResolver() {
                return VnsRegistryClient.getIntegerState(state, 'registry_resolver');
            },
            get registryTtl() {
                return VnsRegistryClient.getIntegerState(state, 'registry_ttl');
            },
            get stakeable() {
                return VnsRegistryClient.getIntegerState(state, 'stakeable');
            },
            get updatable() {
                return VnsRegistryClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return VnsRegistryClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            postUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.postUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setRegistryResolver(args, params) {
                promiseChain = promiseChain.then(() => client.setRegistryResolver(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            killNode(args, params) {
                promiseChain = promiseChain.then(() => client.killNode(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            killOperator(args, params) {
                promiseChain = promiseChain.then(() => client.killOperator(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deleteBox(args, params) {
                promiseChain = promiseChain.then(() => client.deleteBox(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setRecord(args, params) {
                promiseChain = promiseChain.then(() => client.setRecord(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setSubnodeRecord(args, params) {
                promiseChain = promiseChain.then(() => client.setSubnodeRecord(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setSubnodeOwner(args, params) {
                promiseChain = promiseChain.then(() => client.setSubnodeOwner(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setResolver(args, params) {
                promiseChain = promiseChain.then(() => client.setResolver(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setOwner(args, params) {
                promiseChain = promiseChain.then(() => client.setOwner(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setTtl(args, params) {
                promiseChain = promiseChain.then(() => client.setTtl(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setApprovalForAll(args, params) {
                promiseChain = promiseChain.then(() => client.setApprovalForAll(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approve(args, params) {
                promiseChain = promiseChain.then(() => client.approve(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            getApproved(args, params) {
                promiseChain = promiseChain.then(() => client.getApproved(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            ownerOf(args, params) {
                promiseChain = promiseChain.then(() => client.ownerOf(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            resolver(args, params) {
                promiseChain = promiseChain.then(() => client.resolver(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            ttl(args, params) {
                promiseChain = promiseChain.then(() => client.ttl(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            recordExists(args, params) {
                promiseChain = promiseChain.then(() => client.recordExists(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            isApprovedForAll(args, params) {
                promiseChain = promiseChain.then(() => client.isApprovedForAll(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.setDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            participate(args, params) {
                promiseChain = promiseChain.then(() => client.participate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            get delete() {
                const $this = this;
                return {
                    killApplication(args, params) {
                        promiseChain = promiseChain.then(() => client.delete.killApplication(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
