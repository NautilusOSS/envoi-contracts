/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import { AtomicTransactionComposer, modelsv2 } from 'algosdk';
export const APP_SPEC = {
    "hints": {
        "post_update()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mint(address,byte[32],byte[8],uint8,uint256)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "killApplication()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "deleteBalance(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteApproval(address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteBox(byte[])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_name()byte[32]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_symbol()byte[8]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_decimals()uint8": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_totalSupply()uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_balanceOf(address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_allowance(address,address)uint256": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transferFrom(address,address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_transfer(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "arc200_approve(address,uint256)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_version(uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_update(bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "grant_upgrader(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "set_delegate(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "transfer(address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpjb250cmFjdC5PU0FSQzIwMFRva2VuLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzcmMvc3JjL2NvbnRyYWN0LnB5OjU2NwogICAgLy8gY2xhc3MgT1NBUkMyMDBUb2tlbihBUkMyMDBUb2tlbiwgVXBncmFkZWFibGUsIFN0YWtlYWJsZSk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 6,
            "num_uints": 5
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "contract_version": {
                    "type": "uint64",
                    "key": "contract_version"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "delegate": {
                    "type": "bytes",
                    "key": "delegate"
                },
                "deployment_version": {
                    "type": "uint64",
                    "key": "deployment_version"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                },
                "owner": {
                    "type": "bytes",
                    "key": "owner"
                },
                "stakeable": {
                    "type": "uint64",
                    "key": "stakeable"
                },
                "symbol": {
                    "type": "bytes",
                    "key": "symbol"
                },
                "totalSupply": {
                    "type": "bytes",
                    "key": "totalSupply"
                },
                "updatable": {
                    "type": "uint64",
                    "key": "updatable"
                },
                "upgrader": {
                    "type": "bytes",
                    "key": "upgrader"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "OSARC200Token",
        "methods": [
            {
                "name": "post_update",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "mint",
                "args": [
                    {
                        "type": "address",
                        "name": "receiver"
                    },
                    {
                        "type": "byte[32]",
                        "name": "name"
                    },
                    {
                        "type": "byte[8]",
                        "name": "symbol"
                    },
                    {
                        "type": "uint8",
                        "name": "decimals"
                    },
                    {
                        "type": "uint256",
                        "name": "totalSupply"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Mint tokens"
            },
            {
                "name": "killApplication",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteBalance",
                "args": [
                    {
                        "type": "address",
                        "name": "address"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteApproval",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "spender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteBox",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "arc200_name",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[32]"
                }
            },
            {
                "name": "arc200_symbol",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "byte[8]"
                }
            },
            {
                "name": "arc200_decimals",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint8"
                }
            },
            {
                "name": "arc200_totalSupply",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_balanceOf",
                "args": [
                    {
                        "type": "address",
                        "name": "account"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_allowance",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "address",
                        "name": "spender"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint256"
                }
            },
            {
                "name": "arc200_transferFrom",
                "args": [
                    {
                        "type": "address",
                        "name": "sender"
                    },
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "recipient"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "arc200_approve",
                "args": [
                    {
                        "type": "address",
                        "name": "spender"
                    },
                    {
                        "type": "uint256",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "set_version",
                "args": [
                    {
                        "type": "uint64",
                        "name": "contract_version"
                    },
                    {
                        "type": "uint64",
                        "name": "deployment_version"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "approve_update",
                "args": [
                    {
                        "type": "bool",
                        "name": "approval"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "grant_upgrader",
                "args": [
                    {
                        "type": "address",
                        "name": "upgrader"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "set_delegate",
                "args": [
                    {
                        "type": "address",
                        "name": "delegate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "participate",
                "args": [
                    {
                        "type": "byte[32]",
                        "name": "vote_k"
                    },
                    {
                        "type": "byte[32]",
                        "name": "sel_k"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_fst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_lst"
                    },
                    {
                        "type": "uint64",
                        "name": "vote_kd"
                    },
                    {
                        "type": "byte[64]",
                        "name": "sp_key"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "transfer",
                "args": [
                    {
                        "type": "address",
                        "name": "new_owner"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "update_application": "CALL",
        "no_op": "CREATE"
    }
};
/**
 * Exposes methods for constructing all available smart contract calls
 */
export class Osarc200TokenCallFactory {
    /**
     * Gets available create call factories
     */
    static get create() {
        return {
            /**
             * Constructs a create call for the OSARC200Token smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available update call factories
     */
    static get update() {
        return {
            /**
             * Constructs an update call for the OSARC200Token smart contract using a bare call
             *
             * @param params Any parameters for the call
             * @returns A TypedCallParams object for the call
             */
            bare(params = {}) {
                return {
                    method: undefined,
                    methodArgs: undefined,
                    ...params,
                };
            },
        };
    }
    /**
     * Gets available delete call factories
     */
    static get delete() {
        return {
            /**
             * Constructs a delete call for the OSARC200Token smart contract using the killApplication()void ABI method
             *
             * @param args Any args for the contract call
             * @param params Any additional parameters for the call
             * @returns A TypedCallParams object for the call
             */
            killApplication(args, params = {}) {
                return {
                    method: 'killApplication()void',
                    methodArgs: Array.isArray(args) ? args : [],
                    ...params,
                };
            },
        };
    }
    /**
     * Constructs a no op call for the post_update()void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static postUpdate(args, params) {
        return {
            method: 'post_update()void',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the mint(address,byte[32],byte[8],uint8,uint256)void ABI method
     *
     * Mint tokens
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static mint(args, params) {
        return {
            method: 'mint(address,byte[32],byte[8],uint8,uint256)void',
            methodArgs: Array.isArray(args) ? args : [args.receiver, args.name, args.symbol, args.decimals, args.totalSupply],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deleteBalance(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deleteBalance(args, params) {
        return {
            method: 'deleteBalance(address)void',
            methodArgs: Array.isArray(args) ? args : [args.address],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deleteApproval(address,address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deleteApproval(args, params) {
        return {
            method: 'deleteApproval(address,address)void',
            methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the deleteBox(byte[])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static deleteBox(args, params) {
        return {
            method: 'deleteBox(byte[])void',
            methodArgs: Array.isArray(args) ? args : [args.key],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_name()byte[32] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Name(args, params) {
        return {
            method: 'arc200_name()byte[32]',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_symbol()byte[8] ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Symbol(args, params) {
        return {
            method: 'arc200_symbol()byte[8]',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_decimals()uint8 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Decimals(args, params) {
        return {
            method: 'arc200_decimals()uint8',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200TotalSupply(args, params) {
        return {
            method: 'arc200_totalSupply()uint256',
            methodArgs: Array.isArray(args) ? args : [],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200BalanceOf(args, params) {
        return {
            method: 'arc200_balanceOf(address)uint256',
            methodArgs: Array.isArray(args) ? args : [args.account],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Allowance(args, params) {
        return {
            method: 'arc200_allowance(address,address)uint256',
            methodArgs: Array.isArray(args) ? args : [args.owner, args.spender],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200TransferFrom(args, params) {
        return {
            method: 'arc200_transferFrom(address,address,uint256)bool',
            methodArgs: Array.isArray(args) ? args : [args.sender, args.recipient, args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Transfer(args, params) {
        return {
            method: 'arc200_transfer(address,uint256)bool',
            methodArgs: Array.isArray(args) ? args : [args.recipient, args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static arc200Approve(args, params) {
        return {
            method: 'arc200_approve(address,uint256)bool',
            methodArgs: Array.isArray(args) ? args : [args.spender, args.amount],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_version(uint64,uint64)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setVersion(args, params) {
        return {
            method: 'set_version(uint64,uint64)void',
            methodArgs: Array.isArray(args) ? args : [args.contractVersion, args.deploymentVersion],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the approve_update(bool)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static approveUpdate(args, params) {
        return {
            method: 'approve_update(bool)void',
            methodArgs: Array.isArray(args) ? args : [args.approval],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the grant_upgrader(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static grantUpgrader(args, params) {
        return {
            method: 'grant_upgrader(address)void',
            methodArgs: Array.isArray(args) ? args : [args.upgrader],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the set_delegate(address)void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static setDelegate(args, params) {
        return {
            method: 'set_delegate(address)void',
            methodArgs: Array.isArray(args) ? args : [args.delegate],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static participate(args, params) {
        return {
            method: 'participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void',
            methodArgs: Array.isArray(args) ? args : [args.voteK, args.selK, args.voteFst, args.voteLst, args.voteKd, args.spKey],
            ...params,
        };
    }
    /**
     * Constructs a no op call for the transfer(address)void ABI method
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args Any args for the contract call
     * @param params Any additional parameters for the call
     * @returns A TypedCallParams object for the call
     */
    static transfer(args, params) {
        return {
            method: 'transfer(address)void',
            methodArgs: Array.isArray(args) ? args : [args.newOwner],
            ...params,
        };
    }
}
/**
 * A client to make calls to the OSARC200Token smart contract
 */
export class Osarc200TokenClient {
    algod;
    /**
     * The underlying `ApplicationClient` for when you want to have more flexibility
     */
    appClient;
    sender;
    /**
     * Creates a new instance of `Osarc200TokenClient`
     *
     * @param appDetails appDetails The details to identify the app to deploy
     * @param algod An algod client instance
     */
    constructor(appDetails, algod) {
        this.algod = algod;
        this.sender = appDetails.sender;
        this.appClient = algokit.getAppClient({
            ...appDetails,
            app: APP_SPEC
        }, algod);
    }
    /**
     * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
     *
     * @param result The AppCallTransactionResult to be mapped
     * @param returnValueFormatter An optional delegate to format the return value if required
     * @returns The smart contract response with an updated return value
     */
    mapReturnValue(result, returnValueFormatter) {
        if (result.return?.decodeError) {
            throw result.return.decodeError;
        }
        const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
            ? returnValueFormatter(result.return.returnValue)
            : result.return?.returnValue;
        return { ...result, return: returnValue };
    }
    /**
     * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
     *
     * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
     * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
     * @returns The result of the smart contract call
     */
    async call(typedCallParams, returnValueFormatter) {
        return this.mapReturnValue(await this.appClient.call(typedCallParams), returnValueFormatter);
    }
    /**
     * Idempotently deploys the OSARC200Token smart contract.
     *
     * @param params The arguments for the contract calls and any additional parameters for the call
     * @returns The deployment result
     */
    deploy(params = {}) {
        const createArgs = params.createCall?.(Osarc200TokenCallFactory.create);
        const updateArgs = params.updateCall?.(Osarc200TokenCallFactory.update);
        const deleteArgs = params.deleteCall?.(Osarc200TokenCallFactory.delete);
        return this.appClient.deploy({
            ...params,
            updateArgs,
            deleteArgs,
            createArgs,
            createOnCompleteAction: createArgs?.onCompleteAction,
        });
    }
    /**
     * Gets available create methods
     */
    get create() {
        const $this = this;
        return {
            /**
             * Creates a new instance of the OSARC200Token smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The create result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.create(args));
            },
        };
    }
    /**
     * Gets available update methods
     */
    get update() {
        const $this = this;
        return {
            /**
             * Updates an existing instance of the OSARC200Token smart contract using a bare call.
             *
             * @param args The arguments for the bare call
             * @returns The update result
             */
            async bare(args = {}) {
                return $this.mapReturnValue(await $this.appClient.update(args));
            },
        };
    }
    /**
     * Gets available delete methods
     */
    get delete() {
        const $this = this;
        return {
            /**
             * Deletes an existing instance of the OSARC200Token smart contract using the killApplication()void ABI method.
             *
             * @param args The arguments for the smart contract call
             * @param params Any additional parameters for the call
             * @returns The delete result
             */
            async killApplication(args, params = {}) {
                return $this.mapReturnValue(await $this.appClient.delete(Osarc200TokenCallFactory.delete.killApplication(args, params)));
            },
        };
    }
    /**
     * Makes a clear_state call to an existing instance of the OSARC200Token smart contract.
     *
     * @param args The arguments for the bare call
     * @returns The clear_state result
     */
    clearState(args = {}) {
        return this.appClient.clearState(args);
    }
    /**
     * Calls the post_update()void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    postUpdate(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.postUpdate(args, params));
    }
    /**
     * Calls the mint(address,byte[32],byte[8],uint8,uint256)void ABI method.
     *
     * Mint tokens
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    mint(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.mint(args, params));
    }
    /**
     * Calls the deleteBalance(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deleteBalance(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.deleteBalance(args, params));
    }
    /**
     * Calls the deleteApproval(address,address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deleteApproval(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.deleteApproval(args, params));
    }
    /**
     * Calls the deleteBox(byte[])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    deleteBox(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.deleteBox(args, params));
    }
    /**
     * Calls the arc200_name()byte[32] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Name(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Name(args, params));
    }
    /**
     * Calls the arc200_symbol()byte[8] ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Symbol(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Symbol(args, params));
    }
    /**
     * Calls the arc200_decimals()uint8 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Decimals(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Decimals(args, params));
    }
    /**
     * Calls the arc200_totalSupply()uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200TotalSupply(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200TotalSupply(args, params));
    }
    /**
     * Calls the arc200_balanceOf(address)uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200BalanceOf(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200BalanceOf(args, params));
    }
    /**
     * Calls the arc200_allowance(address,address)uint256 ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Allowance(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Allowance(args, params));
    }
    /**
     * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200TransferFrom(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200TransferFrom(args, params));
    }
    /**
     * Calls the arc200_transfer(address,uint256)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Transfer(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Transfer(args, params));
    }
    /**
     * Calls the arc200_approve(address,uint256)bool ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    arc200Approve(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.arc200Approve(args, params));
    }
    /**
     * Calls the set_version(uint64,uint64)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setVersion(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.setVersion(args, params));
    }
    /**
     * Calls the approve_update(bool)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    approveUpdate(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.approveUpdate(args, params));
    }
    /**
     * Calls the grant_upgrader(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    grantUpgrader(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.grantUpgrader(args, params));
    }
    /**
     * Calls the set_delegate(address)void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    setDelegate(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.setDelegate(args, params));
    }
    /**
     * Calls the participate(byte[32],byte[32],uint64,uint64,uint64,byte[64])void ABI method.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    participate(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.participate(args, params));
    }
    /**
     * Calls the transfer(address)void ABI method.
     *
     * Transfer ownership of the contract to a new owner. Emits OwnershipTransferred event.
     *
     * @param args The arguments for the contract call
     * @param params Any additional parameters for the call
     * @returns The result of the call
     */
    transfer(args, params = {}) {
        return this.call(Osarc200TokenCallFactory.transfer(args, params));
    }
    /**
     * Extracts a binary state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns A BinaryState instance containing the state value, or undefined if the key was not found
     */
    static getBinaryState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if (!('valueRaw' in value))
            throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`);
        return {
            asString() {
                return value.value;
            },
            asByteArray() {
                return value.valueRaw;
            }
        };
    }
    /**
     * Extracts a integer state value out of an AppState dictionary
     *
     * @param state The state dictionary containing the state value
     * @param key The key of the state value
     * @returns An IntegerState instance containing the state value, or undefined if the key was not found
     */
    static getIntegerState(state, key) {
        const value = state[key];
        if (!value)
            return undefined;
        if ('valueRaw' in value)
            throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`);
        return {
            asBigInt() {
                return typeof value.value === 'bigint' ? value.value : BigInt(value.value);
            },
            asNumber() {
                return typeof value.value === 'bigint' ? Number(value.value) : value.value;
            },
        };
    }
    /**
     * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
     */
    async getGlobalState() {
        const state = await this.appClient.getGlobalState();
        return {
            get contractVersion() {
                return Osarc200TokenClient.getIntegerState(state, 'contract_version');
            },
            get decimals() {
                return Osarc200TokenClient.getIntegerState(state, 'decimals');
            },
            get delegate() {
                return Osarc200TokenClient.getBinaryState(state, 'delegate');
            },
            get deploymentVersion() {
                return Osarc200TokenClient.getIntegerState(state, 'deployment_version');
            },
            get name() {
                return Osarc200TokenClient.getBinaryState(state, 'name');
            },
            get owner() {
                return Osarc200TokenClient.getBinaryState(state, 'owner');
            },
            get stakeable() {
                return Osarc200TokenClient.getIntegerState(state, 'stakeable');
            },
            get symbol() {
                return Osarc200TokenClient.getBinaryState(state, 'symbol');
            },
            get totalSupply() {
                return Osarc200TokenClient.getBinaryState(state, 'totalSupply');
            },
            get updatable() {
                return Osarc200TokenClient.getIntegerState(state, 'updatable');
            },
            get upgrader() {
                return Osarc200TokenClient.getBinaryState(state, 'upgrader');
            },
        };
    }
    compose() {
        const client = this;
        const atc = new AtomicTransactionComposer();
        let promiseChain = Promise.resolve();
        const resultMappers = [];
        return {
            postUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.postUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            mint(args, params) {
                promiseChain = promiseChain.then(() => client.mint(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deleteBalance(args, params) {
                promiseChain = promiseChain.then(() => client.deleteBalance(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deleteApproval(args, params) {
                promiseChain = promiseChain.then(() => client.deleteApproval(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            deleteBox(args, params) {
                promiseChain = promiseChain.then(() => client.deleteBox(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Name(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Name(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Symbol(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Symbol(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Decimals(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Decimals(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200TotalSupply(args, params) {
                promiseChain = promiseChain.then(() => client.arc200TotalSupply(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200BalanceOf(args, params) {
                promiseChain = promiseChain.then(() => client.arc200BalanceOf(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Allowance(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Allowance(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200TransferFrom(args, params) {
                promiseChain = promiseChain.then(() => client.arc200TransferFrom(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Transfer(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            arc200Approve(args, params) {
                promiseChain = promiseChain.then(() => client.arc200Approve(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setVersion(args, params) {
                promiseChain = promiseChain.then(() => client.setVersion(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            approveUpdate(args, params) {
                promiseChain = promiseChain.then(() => client.approveUpdate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            grantUpgrader(args, params) {
                promiseChain = promiseChain.then(() => client.grantUpgrader(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            setDelegate(args, params) {
                promiseChain = promiseChain.then(() => client.setDelegate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            participate(args, params) {
                promiseChain = promiseChain.then(() => client.participate(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            transfer(args, params) {
                promiseChain = promiseChain.then(() => client.transfer(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            get update() {
                const $this = this;
                return {
                    bare(args) {
                        promiseChain = promiseChain.then(() => client.update.bare({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            get delete() {
                const $this = this;
                return {
                    killApplication(args, params) {
                        promiseChain = promiseChain.then(() => client.delete.killApplication(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } }));
                        resultMappers.push(undefined);
                        return $this;
                    },
                };
            },
            clearState(args) {
                promiseChain = promiseChain.then(() => client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } }));
                resultMappers.push(undefined);
                return this;
            },
            addTransaction(txn, defaultSender) {
                promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)));
                return this;
            },
            async atc() {
                await promiseChain;
                return atc;
            },
            async simulate(options) {
                await promiseChain;
                const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }));
                return {
                    ...result,
                    returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            },
            async execute(sendParams) {
                await promiseChain;
                const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod);
                return {
                    ...result,
                    returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i](val.returnValue) : val.returnValue)
                };
            }
        };
    }
}
